// Test generated by RoostGPT for test roost-test using AI Type Azure Open AI and AI Model roost-gpt4-32k

package com.config;

import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import static org.mockito.Mockito.*;
import org.mockito.junit.jupiter.MockitoExtension;
import org.junit.jupiter.api.extension.ExtendWith;
import org.springframework.security.core.userdetails.UserDetails;
import org.springframework.security.core.userdetails.UsernameNotFoundException;
import static org.junit.jupiter.api.Assertions.*;

import com.model.Admin;
import com.repository.AdminRepository;

@ExtendWith(MockitoExtension.class)
public class AdminDetailsServiceImpl_loadUserByUsername_cc00fbd7ef_Test {

    @Mock
    AdminRepository adminRepository;

    @InjectMocks
    AdminDetailsServiceImpl adminDetailsService;

    @Test
    public void testLoadUserByUsername_WhenAdminExists() {
        String username = "admin";
        Admin admin = new Admin();
        admin.setUsername(username);
        when(adminRepository.getAdminByName(username)).thenReturn(admin);

        UserDetails userDetails = adminDetailsService.loadUserByUsername(username);

        assertEquals(username, userDetails.getUsername());
    }

    @Test
    public void testLoadUserByUsername_WhenAdminDoesNotExists() {
        String username = "unknown";
        when(adminRepository.getAdminByName(username)).thenReturn(null);

        Exception exception = assertThrows(UsernameNotFoundException.class, () -> {
            adminDetailsService.loadUserByUsername(username);
        });

        String expectedMessage = "Could not found admin !!";
        String actualMessage = exception.getMessage();

        assertTrue(actualMessage.contains(expectedMessage));
    }
}
