// Test generated by RoostGPT for test roost-test using AI Type Azure Open AI and AI Model roost-gpt4-32k

package com.config;

import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.when;

import java.io.IOException;
import java.util.HashSet;
import java.util.Set;

import javax.servlet.ServletException;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.springframework.security.core.Authentication;
import org.springframework.security.core.authority.SimpleGrantedAuthority;

public class CustomSuccessHandler_onAuthenticationSuccess_b3c464fe14_Test {

    private CustomSuccessHandler customSuccessHandler;

    private HttpServletRequest request;
    private HttpServletResponse response;
    private Authentication authentication;

    @BeforeEach
    public void setUp() {
        customSuccessHandler = new CustomSuccessHandler();

        request = mock(HttpServletRequest.class);
        response = mock(HttpServletResponse.class);
        authentication = mock(Authentication.class);
    }

    @Test
    public void testOnAuthenticationSuccess_withAdminRole() throws ServletException, IOException {
        Set<String> roles = new HashSet<>();
        roles.add("ROLE_ADMIN");

        when(authentication.getAuthorities()).thenReturn(Set.of(new SimpleGrantedAuthority("ROLE_ADMIN")));
        
        customSuccessHandler.onAuthenticationSuccess(request, response, authentication);
        
        verify(response).sendRedirect("/admin/");
    }

    @Test
    public void testOnAuthenticationSuccess_withUserRole() throws ServletException, IOException {
        Set<String> roles = new HashSet<>();
        roles.add("ROLE_USER");

        when(authentication.getAuthorities()).thenReturn(Set.of(new SimpleGrantedAuthority("ROLE_USER")));

        customSuccessHandler.onAuthenticationSuccess(request, response, authentication);
        
        verify(response).sendRedirect("/user/");
    }
    
    @Test
    public void testOnAuthenticationSuccess_withNoRole() throws ServletException, IOException {
        Set<String> roles = new HashSet<>();

        when(authentication.getAuthorities()).thenReturn(Set.of());

        customSuccessHandler.onAuthenticationSuccess(request, response, authentication);
        
        verify(response).sendRedirect("/signin");
    }
}
