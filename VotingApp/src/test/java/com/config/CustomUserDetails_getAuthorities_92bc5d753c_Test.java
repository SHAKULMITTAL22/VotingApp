// Test generated by RoostGPT for test roost-test using AI Type Azure Open AI and AI Model roost-gpt4-32k

package com.config;

import java.util.ArrayList;
import java.util.Collection;
import java.util.Collections;
import java.util.Iterator;
import java.util.List;
import com.model.Role;
import com.model.User;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.Mock;
import org.mockito.Mockito;
import org.springframework.security.core.GrantedAuthority;
import org.springframework.security.core.authority.SimpleGrantedAuthority;
import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.mockito.Mockito.when;

public class CustomUserDetails_getAuthorities_92bc5d753c_Test {

    private User user;

    @Mock
    private Role role;

    @BeforeEach
    public void setup() {
        user = new User();
        role = Mockito.mock(Role.class);
    }

    @Test
    public void testGetAuthorities_validRoles() {
        when(role.getName()).thenReturn("ROLE_ADMIN");
        user.setRoles(Collections.singletonList(role));

        Collection<? extends GrantedAuthority> authorities = getAuthorities();

        assertEquals(1, authorities.size());
        assertEquals("ROLE_ADMIN", authorities.iterator().next().getAuthority());
    }

    @Test
    public void testGetAuthorities_noRoles() {
        user.setRoles(new ArrayList<>());

        Collection<? extends GrantedAuthority> authorities = getAuthorities();

        assertEquals(0, authorities.size());
    }

    public Collection<? extends GrantedAuthority> getAuthorities() {

        List<SimpleGrantedAuthority> authorities = new ArrayList<>();

        Iterator<Role> itr = user.getRoles().iterator();
        while(itr.hasNext())
        {
            authorities.add(new SimpleGrantedAuthority(itr.next().getName()));
        }

        return authorities;
    }
}
